import { NestFactory } from '@nestjs/core';
import { ValidationPipe } from '@nestjs/common';
import { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';
import { AppModule } from './app.module';

/**
 * Funci√≥n principal para inicializar la aplicaci√≥n
 * Configura Swagger, validaci√≥n global y CORS
 */
async function bootstrap() {
  const app = await NestFactory.create(AppModule);

  // Configurar CORS
  app.enableCors({
    origin: ['http://localhost:3000', 'http://localhost:3001', 'http://localhost:4200'], // Permitir frontend
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH'],
    credentials: true,
  });

  // Configurar prefijo global para las rutas de la API
  app.setGlobalPrefix('api');

  // Configurar validaci√≥n global
  app.useGlobalPipes(new ValidationPipe({
    whitelist: true, // Remover propiedades no definidas en DTO
    forbidNonWhitelisted: true, // Lanzar error si hay propiedades no permitidas
    transform: true, // Transformar tipos autom√°ticamente
    transformOptions: {
      enableImplicitConversion: true, // Conversi√≥n impl√≠cita de tipos
    },
  }));

  // Configuraci√≥n de Swagger
  const config = new DocumentBuilder()
    .setTitle('Catering Management API')
    .setDescription(`
      API REST para sistema de gesti√≥n de catering que incluye:
      
      üìã **Funcionalidades principales:**
      - Gesti√≥n de clientes (registro, edici√≥n, historial)
      - Cat√°logo de men√∫s y alimentos
      - Creaci√≥n y personalizaci√≥n de pedidos
      - Gesti√≥n de inventario de insumos
      - Planificaci√≥n de entregas
      - Panel de administraci√≥n con m√©tricas
      
      üèóÔ∏è **Patrones de dise√±o implementados:**
      - **Repository Pattern**: Acceso a datos
      - **Factory Pattern**: Generaci√≥n de n√∫meros de orden
      - **Observer Pattern**: Notificaciones y alertas
      - **Strategy Pattern**: Diferentes tipos de b√∫squeda
      - **DTO Pattern**: Transferencia de datos
      
      üîß **Tecnolog√≠as:**
      - NestJS + TypeScript
      - PostgreSQL + TypeORM
      - Swagger para documentaci√≥n
      - Class Validator para validaciones
    `)
    .setVersion('1.0')
    .addTag('clientes', 'Gesti√≥n de clientes del sistema')
    .addTag('menu', 'Cat√°logo de men√∫s y categor√≠as')
    .addTag('orders', 'Gesti√≥n de pedidos de catering')
    .addTag('inventario', 'Gesti√≥n de inventario de insumos')
    .build();

  const document = SwaggerModule.createDocument(app, config);
  SwaggerModule.setup('api/docs', app, document, {
    customSiteTitle: 'Catering API Documentation',
    customfavIcon: '/favicon.ico',
    customCss: `
      .swagger-ui .topbar { display: none }
      .swagger-ui .info .title { color: #2c3e50; }
    `,
  });

  const port = process.env.PORT || 3000;
  await app.listen(port);
  
  console.log(`üöÄ Aplicaci√≥n iniciada en: http://localhost:${port}`);
  console.log(`üìö Documentaci√≥n Swagger: http://localhost:${port}/api/docs`);
  console.log(`üóÑÔ∏è  Base de datos: PostgreSQL`);
  console.log(`üìä M√©tricas disponibles en: /api/orders/estadisticas`);
}

bootstrap();
